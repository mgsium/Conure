{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import ConureNavbar from\"./components/ConureNavbar/ConureNavbar\";import ConureTaskWindow from\"./components/ConureTaskWindow/ConureTaskWindow\";import ConureDetailWindow from\"./components/ConureDetailWindow/ConureDetailWindow\";import ConureQuoteWindow from\"./components/ConureQuoteWindow/ConureQuoteWindow\";import ConureUserBar from\"./components/ConureUserBar/ConureUserBar\";import{cx}from\"emotion\";import Styles from\"./AppStyles\";import $ from\"jquery\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(props){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this,props));// State\n_this.state={user:{},tasks:[],newPoints:0,currentTask:{},counting:false};// Level Information\n_this.levelImages=[\"/png/pigeon.png\",\"/png/flamingo.png\",\"/png/pelican.png\",\"/png/bluebird.png\",\"/png/puffin.png\",\"/png/conure-light.png\"];_this.levelThresholds=[0,150,250,450,750,900];// Method Bindings\n_this.getUserData=_this.getUserData.bind(_assertThisInitialized(_this));_this.showDetail=_this.showDetail.bind(_assertThisInitialized(_this));_this.toggleCountdown=_this.toggleCountdown.bind(_assertThisInitialized(_this));_this.countdown=_this.countdown.bind(_assertThisInitialized(_this));_this.removeTask=_this.removeTask.bind(_assertThisInitialized(_this));_this.addTask=_this.addTask.bind(_assertThisInitialized(_this));_this.updateTask=_this.updateTask.bind(_assertThisInitialized(_this));_this.autosetDetailWindow=_this.autosetDetailWindow.bind(_assertThisInitialized(_this));_this.Login=_this.Login.bind(_assertThisInitialized(_this));_this.createAccount=_this.createAccount.bind(_assertThisInitialized(_this));_this.markAsDone=_this.markAsDone.bind(_assertThisInitialized(_this));_this.addXP=_this.addXP.bind(_assertThisInitialized(_this));return _this;}// Get User Data\n_createClass(App,[{key:\"getUserData\",value:function getUserData(){var _this2=this;var params=new URLSearchParams(document.location.search);var id=params.get(\"id\");if(!id){console.log(\"Error: The id paramater is missing from the url.\");return;}console.log(\"Fetching data...\");var URL=\"https://conure-backend.herokuapp.com/importUserData?id=\".concat(id);fetch(URL).then(function(res){return res.json();}).then(function(data){//data = JSON.parse(data);\nconsole.log(\"Data fetched.\");console.log(data.user_info);console.log(data.tasks);_this2.setState({user:data.user_info,tasks:data.tasks});}).then(function(){_this2.autosetDetailWindow();}).then(function(){// Turning off the loading screen\nconsole.log($(\"#LoadingScreen\"));$(\"#LoadingScreen\").fadeOut();}).catch(function(error){console.log(\"Error retrieving user data: \".concat(error));});}},{key:\"autosetDetailWindow\",value:function autosetDetailWindow(){try{var targetID=this.state.tasks[0]._id;document.getElementById(targetID).childNodes[0].click();}catch(error){this.setState({currentTask:{body:\"\",target:\"\"}});}}// Show Detail\n},{key:\"showDetail\",value:function showDetail(event){// Get the ID of the Target Task Element & Task List\nvar targetID=event.target.parentNode.id;var tasks=this.state.tasks;// Call removeTask if the cross has been selected\nif(!targetID){this.removeTask(event);return;}// Extract the Target task from the task list\nvar currentTask={};tasks.forEach(function(task){if(task._id==targetID)currentTask=task;});// Set the new current task in state.\nthis.setState({currentTask:currentTask});}// Toggle Countdown\n},{key:\"toggleCountdown\",value:function toggleCountdown(){var _this3=this;this.setState({counting:!this.state.counting},function(){console.log(\"Counting: \".concat(_this3.state.counting));if(_this3.state.counting){_this3.countdown();}});}// Countdown\n},{key:\"countdown\",value:function countdown(){var _this4=this;var outerThis=this;var currentTask={};var tempKey=0;var URL=\"https://conure-backend.herokuapp.com/upda\\n        teUserInfo\";var body={};var interval=setInterval(function(){currentTask=_this4.state.currentTask;currentTask.target-=1000;outerThis.setState({currentTask:currentTask},function(){if(outerThis.state.counting==false){clearInterval(interval);// Save to MongoDB\nbody=JSON.stringify({\"user\":outerThis.state.user,\"tasks\":outerThis.state.tasks});console.log(body);fetch(URL,{headers:{\"Content-type\":\"application/json\"},method:\"PUT\",body:body}).then(function(res){return res.json;}).then(function(res){console.log(res);});}});},1000);}// Update Task\n},{key:\"updateTask\",value:function updateTask(event){var _this5=this;// Getting the ID of the content editable field, the new body and the tasklist\nvar targetID=this.state.currentTask._id;var newBody=$(event.target).text();var tasks=this.state.tasks;// Applying update to relevant task\ntasks.forEach(function(task){if(task._id==targetID)task.body=newBody;});// Set the updated task list in state.\nthis.setState({tasks:tasks},function(){console.log(\"Saving...\");// Update Task List & UserInfo Data\nvar URL=\"https://conure-backend.herokuapp.com/updateUserInfo\";var body=JSON.stringify({user:_this5.state.user,tasks:_this5.state.tasks});console.log(_this5.state.tasks);fetch(URL,{headers:{\"Content-type\":\"application/json\"},method:\"PUT\",body:body}).then(function(res){return res.json();}).then(function(data){return console.log(data);}).catch(function(error){console.log(error);});});// ->> Move back to previous position\n// Moving the Caret back to the end\ndocument.getElementById(targetID).focus();document.execCommand('selectAll',false,null);var selection=document.getSelection();selection.collapseToEnd();}// removeTask\n},{key:\"removeTask\",value:function removeTask(event){var _this6=this;var targetID=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!targetID){// Get the ID of the target Task Element\ntargetID=event.target.parentNode.parentNode.parentNode.id;if(!targetID)targetID=event.target.parentNode.parentNode.id;}var URL=\"https://conure-backend.herokuapp.com/removeTask\";// console.log(this.state.user.key, targetID);\nvar body=JSON.stringify({\"id\":this.state.user.key,\"taskId\":targetID});fetch(URL,{headers:{\"Content-type\":\"application/json\"},method:\"PUT\",body:body});// Get Current Task List\nvar tasks=this.state.tasks;// Filter out the target task\ntasks=tasks.filter(function(task){return task._id!=targetID;});// Set the task list to the remaining tasks\nthis.setState({tasks:tasks},function(){_this6.autosetDetailWindow();});}// addTask\n},{key:\"addTask\",value:function addTask(event){var _this7=this;var URL=\"https://conure-backend.herokuapp.com/createTask\";var body=JSON.stringify({\"id\":this.state.user.key,\"body\":\"Type here.\",\"target\":10});console.log(body);fetch(URL,{headers:{\"Content-type\":\"application/json\"},method:\"PUT\",body:body}).then(function(response){console.log(\"Created New Task.\");_this7.getUserData();});}// Login\n},{key:\"Login\",value:function Login(b64key){// Check if account exists (backend request)\ndocument.location=\"\".concat(document.location.href.split(\"?\")[0],\"?id=\").concat(b64key);}// createAccount\n},{key:\"createAccount\",value:function createAccount(username){var URL=\"https://conure-backend.herokuapp.com/generateID\";fetch(URL).then(function(res){return res.json();}).then(function(doc){var key=doc.key;URL=\"https://conure-backend.herokuapp.com/createUserBucket?id=\".concat(key,\"&username=\").concat(username);fetch(URL).then(function(){document.location=\"\".concat(document.location.href.split(\"?\")[0],\"?id=\").concat(key);});});}// Mark as Done\n},{key:\"markAsDone\",value:function markAsDone(event,taskInfo){this.addXP(event,100);// Remove Task Below\nvar ID=taskInfo.currentTask._id;this.removeTask(event,ID);}// Add XP\n},{key:\"addXP\",value:function addXP(event,points){var user=this.state.user;user.xp+=points;this.setState({user:user});console.log(user);}// Component Will Mount\n},{key:\"componentWillMount\",value:function componentWillMount(){this.getUserData();}// Component Did Unmount\n},{key:\"componentWillUnmount\",value:function componentWillUnmount(){}// Render\n},{key:\"render\",value:function render(){{/* Retrieve Mongo Entries via API */}return React.createElement(React.Fragment,null,React.createElement(\"div\",{id:\"LoadingScreen\",className:cx(Styles.LoadingScreen)}),React.createElement(ConureNavbar,{id:\"ConureNavbar\",showLoginModal:this.showLoginModal,loginHandler:this.Login,createAccount:this.createAccount}),React.createElement(ConureTaskWindow,{id:\"ConureTaskWindow\",tasks:this.state.tasks,removeTask:this.removeTask,addTask:this.addTask,showDetail:this.showDetail}),React.createElement(ConureDetailWindow,{id:\"ConureDetailWindow\",currentTask:this.state.currentTask,updateTask:this.updateTask,markAsDone:this.markAsDone,toggleCountdown:this.toggleCountdown}),React.createElement(ConureQuoteWindow,{id:\"ConureQuoteWindow\"}),React.createElement(ConureUserBar,{id:\"ConureUserBar\",userName:this.state.user.username,levelThresholds:this.levelThresholds,levelImages:this.levelImages,basePoints:this.state.user.xp,newPoints:this.state.newPoints}));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["C:/Users/User/Documents/Programming/conure/frontend/src/App.js"],"names":["React","Component","ConureNavbar","ConureTaskWindow","ConureDetailWindow","ConureQuoteWindow","ConureUserBar","cx","Styles","$","App","props","state","user","tasks","newPoints","currentTask","counting","levelImages","levelThresholds","getUserData","bind","showDetail","toggleCountdown","countdown","removeTask","addTask","updateTask","autosetDetailWindow","Login","createAccount","markAsDone","addXP","params","URLSearchParams","document","location","search","id","get","console","log","URL","fetch","then","res","json","data","user_info","setState","fadeOut","catch","error","targetID","_id","getElementById","childNodes","click","body","target","event","parentNode","forEach","task","outerThis","tempKey","interval","setInterval","clearInterval","JSON","stringify","headers","method","newBody","text","focus","execCommand","selection","getSelection","collapseToEnd","key","filter","response","b64key","href","split","username","doc","taskInfo","ID","points","xp","LoadingScreen","showLoginModal"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport ConureNavbar from \"./components/ConureNavbar/ConureNavbar\";\r\nimport ConureTaskWindow from \"./components/ConureTaskWindow/ConureTaskWindow\";\r\nimport ConureDetailWindow from \"./components/ConureDetailWindow/ConureDetailWindow\";\r\nimport ConureQuoteWindow from \"./components/ConureQuoteWindow/ConureQuoteWindow\";\r\nimport ConureUserBar from \"./components/ConureUserBar/ConureUserBar\";\r\n\r\nimport { cx } from \"emotion\";\r\nimport Styles from \"./AppStyles\";\r\n\r\nimport $ from \"jquery\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // State\r\n        this.state = {\r\n            user: {},\r\n            tasks: [],\r\n            newPoints: 0,\r\n            currentTask: {\r\n                \r\n            },\r\n            counting: false,\r\n        };\r\n\r\n        // Level Information\r\n        this.levelImages = [\"/png/pigeon.png\", \"/png/flamingo.png\", \"/png/pelican.png\", \"/png/bluebird.png\", \"/png/puffin.png\", \"/png/conure-light.png\"];\r\n        this.levelThresholds = [0, 150, 250, 450, 750, 900];\r\n\r\n        // Method Bindings\r\n        this.getUserData = this.getUserData.bind(this);\r\n        this.showDetail = this.showDetail.bind(this);\r\n        this.toggleCountdown = this.toggleCountdown.bind(this);\r\n        this.countdown = this.countdown.bind(this);\r\n        this.removeTask = this.removeTask.bind(this);\r\n        this.addTask = this.addTask.bind(this);\r\n        this.updateTask = this.updateTask.bind(this);\r\n        this.autosetDetailWindow = this.autosetDetailWindow.bind(this);\r\n        this.Login = this.Login.bind(this);\r\n        this.createAccount = this.createAccount.bind(this);\r\n        this.markAsDone = this.markAsDone.bind(this);\r\n        this.addXP = this.addXP.bind(this);\r\n    }\r\n\r\n    // Get User Data\r\n    getUserData() {\r\n        const params = new URLSearchParams(document.location.search);\r\n        const id = params.get(\"id\");\r\n\r\n        if ( !id ) {\r\n            console.log(\"Error: The id paramater is missing from the url.\");\r\n            return\r\n        }\r\n\r\n        console.log(\"Fetching data...\")\r\n        const URL = `https://conure-backend.herokuapp.com/importUserData?id=${id}`;\r\n        fetch(URL)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            //data = JSON.parse(data);\r\n            console.log(\"Data fetched.\")\r\n            console.log(data.user_info);\r\n            console.log(data.tasks);\r\n            this.setState({user: data.user_info, tasks: data.tasks})\r\n        })\r\n        .then(() => {\r\n            this.autosetDetailWindow();\r\n        })\r\n        .then(() => {\r\n            // Turning off the loading screen\r\n            console.log($(\"#LoadingScreen\"))\r\n            $(\"#LoadingScreen\").fadeOut();\r\n        })\r\n        .catch(error => {\r\n            console.log(`Error retrieving user data: ${error}`);\r\n        })\r\n\r\n    }\r\n\r\n    autosetDetailWindow() {\r\n        try {\r\n            const targetID = this.state.tasks[0]._id;\r\n            document.getElementById(targetID).childNodes[0].click();\r\n        } catch ( error ) {\r\n            this.setState({ currentTask: {\r\n                body: \"\",\r\n                target: \"\"\r\n            }})\r\n        }\r\n    }\r\n\r\n    // Show Detail\r\n    showDetail(event) {\r\n        // Get the ID of the Target Task Element & Task List\r\n        let targetID = event.target.parentNode.id;\r\n        const tasks = this.state.tasks;\r\n\r\n        // Call removeTask if the cross has been selected\r\n        if ( !targetID ) {\r\n            this.removeTask(event);\r\n            return;\r\n        }\r\n\r\n        // Extract the Target task from the task list\r\n        let currentTask = {};\r\n        tasks.forEach( task => { if ( task._id == targetID ) currentTask = task });\r\n\r\n        // Set the new current task in state.\r\n        this.setState({ currentTask: currentTask });\r\n    }\r\n\r\n    // Toggle Countdown\r\n    toggleCountdown() {\r\n        this.setState({counting: !this.state.counting}, () => {\r\n            console.log(`Counting: ${this.state.counting}`);\r\n            if (this.state.counting) {\r\n                this.countdown();\r\n            }\r\n        });\r\n    }    \r\n\r\n    // Countdown\r\n    countdown() {\r\n        const outerThis = this;\r\n        let currentTask = {};\r\n        let tempKey = 0;\r\n\r\n        const URL = `https://conure-backend.herokuapp.com/upda\r\n        teUserInfo`;\r\n        let body = {} \r\n\r\n        const interval = setInterval(() => {\r\n            currentTask = this.state.currentTask;\r\n            currentTask.target -= 1000\r\n            outerThis.setState({currentTask: currentTask}, () => {\r\n                if(outerThis.state.counting == false) {\r\n                    clearInterval(interval);  \r\n                    \r\n                    // Save to MongoDB\r\n                    body = JSON.stringify({\r\n                        \"user\": outerThis.state.user,\r\n                        \"tasks\": outerThis.state.tasks,\r\n                    })\r\n                    console.log(body);\r\n\r\n                    fetch(URL, {\r\n                        headers: {\r\n                            \"Content-type\": \"application/json\"\r\n                        },\r\n                        method: \"PUT\",\r\n                        body: body,\r\n                    })\r\n                    .then( res => res.json )\r\n                    .then( res => {\r\n                        console.log(res);    \r\n                    })\r\n                }\r\n            });\r\n        }, 1000)\r\n    }\r\n\r\n    // Update Task\r\n    updateTask(event){\r\n        // Getting the ID of the content editable field, the new body and the tasklist\r\n        const targetID = this.state.currentTask._id;\r\n        const newBody = $(event.target).text();\r\n        const tasks = this.state.tasks;\r\n\r\n        // Applying update to relevant task\r\n        tasks.forEach( task => { if (task._id  == targetID)  task.body=newBody });\r\n\r\n        // Set the updated task list in state.\r\n        this.setState({ tasks: tasks }, () => {\r\n            console.log(\"Saving...\");\r\n\r\n            // Update Task List & UserInfo Data\r\n            const URL = \"https://conure-backend.herokuapp.com/updateUserInfo\";\r\n            const body = JSON.stringify({\r\n                user: this.state.user,\r\n                tasks: this.state.tasks\r\n            })\r\n\r\n            console.log(this.state.tasks);\r\n\r\n            fetch(URL, {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\"\r\n                },\r\n                method: \"PUT\",\r\n                body: body\r\n            })\r\n            .then( res => res.json())\r\n            .then( data => console.log(data))\r\n            .catch( (error) => {\r\n                console.log(error);\r\n            })\r\n\r\n        })\r\n\r\n        // ->> Move back to previous position\r\n        // Moving the Caret back to the end\r\n        document.getElementById(targetID).focus();\r\n        document.execCommand('selectAll', false, null);\r\n        const selection = document.getSelection();\r\n        selection.collapseToEnd();\r\n    }\r\n\r\n    // removeTask\r\n    removeTask(event, targetID = false) {\r\n        if (!targetID) {\r\n            // Get the ID of the target Task Element\r\n            targetID = event.target.parentNode.parentNode.parentNode.id;\r\n            if ( !targetID ) targetID = event.target.parentNode.parentNode.id;\r\n        }\r\n\r\n        const URL = \"https://conure-backend.herokuapp.com/removeTask\";\r\n        // console.log(this.state.user.key, targetID);\r\n        const body = JSON.stringify({\r\n            \"id\": this.state.user.key,\r\n            \"taskId\": targetID\r\n        });\r\n        fetch(URL, {\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            method: \"PUT\",\r\n            body: body\r\n        })\r\n\r\n        // Get Current Task List\r\n        let tasks = this.state.tasks;\r\n\r\n        // Filter out the target task\r\n        tasks = tasks.filter(task => { return task._id != targetID });\r\n\r\n        // Set the task list to the remaining tasks\r\n        this.setState({tasks: tasks}, () => {\r\n            this.autosetDetailWindow();\r\n        });\r\n    }\r\n\r\n    // addTask\r\n    addTask(event) {\r\n        const URL = \"https://conure-backend.herokuapp.com/createTask\";\r\n        const body = JSON.stringify({\r\n            \"id\": this.state.user.key,\r\n            \"body\": \"Type here.\",\r\n            \"target\": 10\r\n        })\r\n\r\n        console.log(body);\r\n\r\n        fetch(URL, {\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            method: \"PUT\",\r\n            body: body\r\n        })\r\n        .then( response => {\r\n            console.log(\"Created New Task.\");\r\n            this.getUserData();\r\n        })\r\n\r\n    }\r\n\r\n    // Login\r\n    Login(b64key) {\r\n        // Check if account exists (backend request)\r\n        document.location = `${document.location.href.split(\"?\")[0]}?id=${b64key}`;\r\n    }\r\n\r\n    // createAccount\r\n    createAccount(username) {\r\n        let URL = \"https://conure-backend.herokuapp.com/generateID\"\r\n\r\n        fetch(URL)\r\n        .then( res => res.json() )\r\n        .then( doc => {\r\n            const key = doc.key;\r\n            URL = `https://conure-backend.herokuapp.com/createUserBucket?id=${key}&username=${username}`;\r\n\r\n            fetch(URL)\r\n            .then(() => {\r\n                document.location = `${document.location.href.split(\"?\")[0]}?id=${key}`;\r\n            })\r\n        })\r\n    }\r\n\r\n    // Mark as Done\r\n    markAsDone(event, taskInfo) {\r\n        this.addXP(event, 100);\r\n\r\n        // Remove Task Below\r\n        const ID = taskInfo.currentTask._id;\r\n        this.removeTask(event, ID);\r\n    }\r\n\r\n    // Add XP\r\n    addXP(event, points) {\r\n        let user = this.state.user;\r\n        user.xp += points;\r\n        this.setState({user: user});\r\n        console.log(user);\r\n        \r\n    }\r\n\r\n    // Component Will Mount\r\n    componentWillMount() {\r\n        this.getUserData();\r\n    }\r\n\r\n    // Component Did Unmount\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    // Render\r\n    render() {\r\n        {/* Retrieve Mongo Entries via API */}\r\n        return (\r\n            <>\r\n                <div id=\"LoadingScreen\" className={cx(Styles.LoadingScreen)}></div>\r\n\r\n                <ConureNavbar \r\n                    id=\"ConureNavbar\" \r\n                    showLoginModal={this.showLoginModal} \r\n                    loginHandler={this.Login}\r\n                    createAccount={this.createAccount}\r\n                />\r\n                <ConureTaskWindow \r\n                    id=\"ConureTaskWindow\" \r\n                    tasks={this.state.tasks} \r\n                    removeTask={this.removeTask} \r\n                    addTask={this.addTask} \r\n                    showDetail={this.showDetail}\r\n                />\r\n                <ConureDetailWindow \r\n                    id=\"ConureDetailWindow\"    \r\n                    currentTask={this.state.currentTask} \r\n                    updateTask={this.updateTask}\r\n                    markAsDone={this.markAsDone}\r\n                    toggleCountdown={this.toggleCountdown}\r\n                />\r\n                <ConureQuoteWindow\r\n                    id=\"ConureQuoteWindow\"\r\n                />\r\n                <ConureUserBar \r\n                    id=\"ConureUserBar\" \r\n                    userName={this.state.user.username} \r\n                    levelThresholds={this.levelThresholds}\r\n                    levelImages={this.levelImages}\r\n                    basePoints={this.state.user.xp} \r\n                    newPoints={this.state.newPoints} \r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}