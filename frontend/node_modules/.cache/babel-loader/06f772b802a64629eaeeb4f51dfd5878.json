{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\User\\\\Documents\\\\Programming\\\\conure\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Container from\"react-bootstrap/Container\";import ButtonGroup from\"react-bootstrap/ButtonGroup\";import Button from\"react-bootstrap/Button\";import Jumbotron from\"react-bootstrap/Jumbotron\";import{cx}from\"emotion\";import Styles from\"./ConureDetailWindowStyles.js\";import $ from\"jquery\";var ConureDetailWindow=/*#__PURE__*/function(_Component){_inherits(ConureDetailWindow,_Component);function ConureDetailWindow(props){var _this;_classCallCheck(this,ConureDetailWindow);_this=_possibleConstructorReturn(this,_getPrototypeOf(ConureDetailWindow).call(this,props));_this.state={counting:false,toggleCoundownButtonVariant:\"success\",toggleCoundownButtonContent:\"Start\"};// Method Bindings\n_this.toggleCountdown=_this.toggleCountdown.bind(_assertThisInitialized(_this));return _this;}_createClass(ConureDetailWindow,[{key:\"toggleCountdown\",value:function toggleCountdown(event){// Toggle Countdown\nconsole.log(\"Toggling Countdown...\");var counting=!this.state.counting;if(counting){console.log(\"Starting\");this.setState({counting:counting,toggleCoundownButtonVariant:\"danger\",toggleCoundownButtonContent:\"Stop\"});}else{console.log(\"Stopping\");this.setState({counting:counting,toggleCoundownButtonVariant:\"success\",toggleCoundownButtonContent:\"Start\"});}this.props.toggleCountdown();}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;document.getElementById(\"taskBodyField\").addEventListener(\"input\",function(event){_this2.props.updateTask(event);},false);}},{key:\"render\",value:function render(){var _this3=this;var body=this.props.currentTask.body;var time_target=0;try{time_target=new Date(this.props.currentTask.target);}catch(err){time_target=new Date(0);}console.log(\"Time Target Type: \".concat(typeof time_target));return React.createElement(\"div\",{id:this.props.id,className:cx(Styles.DetailWindowWrapperStyle)},React.createElement(Container,{fluid:true},React.createElement(\"p\",null,\"In Detail\"),React.createElement(\"hr\",null),React.createElement(\"div\",{id:\"taskBodyField\",contentEditable:true,suppressContentEditableWarning:true,spellCheck:false,className:cx(Styles.TaskBodyStyle),placeholder:\"Type here!\"},body),React.createElement(\"br\",null),React.createElement(\"hr\",null),React.createElement(Jumbotron,{className:cx(Styles.ControlPanelStyles),fluid:true},React.createElement(Container,null,function(){console.log(\"test\");if(_this3.props.currentTask._id){// console.log(this.props.currentTask);\nreturn React.createElement(React.Fragment,null,React.createElement(\"small\",{className:cx(\"text-muted\")},React.createElement(\"i\",null,\"Time Left\")),React.createElement(\"h4\",null,\"\".concat(time_target.getHours(),\"h \").concat(time_target.getMinutes(),\"m \").concat(time_target.getSeconds(),\"s\")),React.createElement(\"br\",null),React.createElement(Button,{id:\"toggleCountdownBtn\",className:cx(Styles.ButtonStyles),variant:_this3.state.toggleCoundownButtonVariant,onClick:_this3.toggleCountdown,size:\"sm\"},_this3.state.toggleCoundownButtonContent),React.createElement(Button,{className:cx(Styles.ButtonStyles),variant:\"primary\",onClick:function onClick(event){_this3.setState({counting:false},function(){_this3.props.markAsDone(event,_this3.props);});},size:\"sm\"},\"Mark as Done\"));}else{return React.createElement(\"h4\",{className:cx(\"text-muted\")},React.createElement(\"i\",null,\"Click the red button to add a task!\"));}}()))));}}]);return ConureDetailWindow;}(Component);export default ConureDetailWindow;","map":{"version":3,"sources":["C:/Users/User/Documents/Programming/conure/frontend/src/components/ConureDetailWindow/ConureDetailWindow.js"],"names":["React","Component","Container","ButtonGroup","Button","Jumbotron","cx","Styles","$","ConureDetailWindow","props","state","counting","toggleCoundownButtonVariant","toggleCoundownButtonContent","toggleCountdown","bind","event","console","log","setState","document","getElementById","addEventListener","updateTask","body","currentTask","time_target","Date","target","err","id","DetailWindowWrapperStyle","TaskBodyStyle","ControlPanelStyles","_id","getHours","getMinutes","getSeconds","ButtonStyles","markAsDone"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\n\r\nimport { cx } from \"emotion\";\r\nimport Styles from \"./ConureDetailWindowStyles.js\";\r\n\r\nimport $ from \"jquery\";\r\n\r\nclass ConureDetailWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counting: false,\r\n            toggleCoundownButtonVariant: \"success\",\r\n            toggleCoundownButtonContent: \"Start\"\r\n        }\r\n\r\n        // Method Bindings\r\n        this.toggleCountdown = this.toggleCountdown.bind(this);\r\n    }\r\n    toggleCountdown( event ) {\r\n        // Toggle Countdown\r\n        console.log(\"Toggling Countdown...\")\r\n        let counting = !this.state.counting;\r\n\r\n        if (counting) {\r\n            console.log(\"Starting\")\r\n\r\n            this.setState({\r\n                counting: counting,\r\n                toggleCoundownButtonVariant: \"danger\",\r\n                toggleCoundownButtonContent: \"Stop\"\r\n            });\r\n        } else {\r\n            console.log(\"Stopping\")\r\n\r\n            this.setState({\r\n                counting: counting,\r\n                toggleCoundownButtonVariant: \"success\",\r\n                toggleCoundownButtonContent: \"Start\"\r\n            });\r\n\r\n        }\r\n\r\n        this.props.toggleCountdown();\r\n    }\r\n    \r\n    componentDidMount() {\r\n        document.getElementById(\"taskBodyField\").addEventListener(\"input\", ( event ) => {\r\n            this.props.updateTask(event);\r\n        }, false)\r\n    }\r\n    render() {\r\n        const body = this.props.currentTask.body;\r\n        let time_target = 0\r\n\r\n        try {\r\n            time_target = new Date(this.props.currentTask.target);\r\n        } catch(err) {\r\n            time_target = new Date(0);\r\n        }\r\n\r\n        console.log(`Time Target Type: ${typeof time_target}`);\r\n\r\n\r\n        return (\r\n            <div id={this.props.id} className={ cx( Styles.DetailWindowWrapperStyle ) }>\r\n                <Container fluid>\r\n                    <p>In Detail</p>\r\n                    <hr/>\r\n                    <div id={\"taskBodyField\"}\r\n                        contentEditable={true} \r\n                        suppressContentEditableWarning={true}\r\n                        spellCheck={false} \r\n                        className={ cx(Styles.TaskBodyStyle) } \r\n                        placeholder=\"Type here!\"\r\n                    >{body}</div>\r\n                    <br/>\r\n                    <hr/>\r\n                    <Jumbotron className={ cx(Styles.ControlPanelStyles) } fluid>\r\n                        <Container>\r\n                            {(() => {\r\n                                console.log(\"test\");\r\n\r\n                                if (this.props.currentTask._id) {\r\n                                    // console.log(this.props.currentTask);\r\n                                    \r\n                                    return (\r\n                                        <>\r\n                                            <small className={ cx(\"text-muted\") }><i>Time Left</i></small>\r\n                                            <h4>{`${time_target.getHours()}h ${time_target.getMinutes()}m ${time_target.getSeconds()}s`}</h4>\r\n                                            <br/>\r\n                                            <Button id=\"toggleCountdownBtn\" className={ cx(Styles.ButtonStyles) } variant={this.state.toggleCoundownButtonVariant} onClick={this.toggleCountdown} size=\"sm\">{this.state.toggleCoundownButtonContent}</Button>\r\n                                            <Button className={ cx(Styles.ButtonStyles) }variant=\"primary\" onClick={(event) => {\r\n                                                this.setState({counting: false}, () => {\r\n                                                    this.props.markAsDone(event, this.props);\r\n                                                });\r\n                                                }} size=\"sm\">Mark as Done</Button>\r\n                                        </>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <h4 className={ cx(\"text-muted\") }>\r\n                                            <i>Click the red button to add a task!</i>\r\n                                        </h4>\r\n                                    )\r\n                                }\r\n                                })() }\r\n                        </Container>\r\n                    </Jumbotron>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConureDetailWindow;"]},"metadata":{},"sourceType":"module"}