{"version":3,"sources":["components/ConureNavbar/ConureNavbarStyles.js","components/ConureNavbar/ConureNavbar.js","components/ConureTaskWindow/ConureTaskWindowStyles.js","components/ConureTaskWindow/ConureTaskWindow.js","components/ConureDetailWindow/ConureDetailWindowStyles.js","components/ConureDetailWindow/ConureDetailWindow.js","components/ConureQuoteWindow/ConureQuoteWindowStyles.js","components/ConureQuoteWindow/ConureQuoteWindow.js","components/ConureUserBar/ConureUserBarStyles.js","components/ConureUserBar/ConureUserBar.js","AppStyles.js","App.js","index.js"],"names":["Styles","NavbarStyle","css","LogoStyle","userKeyStyle","LoginLinkWrapperStyle","LoginLinkStyle","ConureNavbar","props","state","showModal","userKey","URLSearchParams","window","location","search","get","open","bind","close","this","setState","popover","Popover","id","Title","as","Content","Navbar","className","cx","bg","expand","Brand","href","src","OverlayTrigger","trigger","placement","overlay","Nav","onClick","Modal","show","onHide","Header","closeButton","size","ModalHeaderStyles","Body","Container","Form","Group","controlId","Label","Control","type","placeholder","Text","Button","variant","loginHandler","$","val","createAccount","Component","TaskWindowWrapperStyle","TaskWindowContainerStyle","TaskListStyle","TaskStyle","TaskWrapperStyle","AddTaskBtnStyle","DeleteIconStyle","ConureTaskWindow","fluid","ListGroup","tasks","map","task","_id","key","Item","showDetail","body","addTask","DetailWindowWrapperStyle","TaskBodyStyle","ControlPanelStyles","ButtonStyles","ConureDetailWindow","counting","toggleCoundownButtonVariant","toggleCoundownButtonContent","toggleCountdown","event","console","log","document","getElementById","addEventListener","updateTask","currentTask","time_target","Date","target","err","contentEditable","suppressContentEditableWarning","spellCheck","Jumbotron","getHours","getMinutes","getSeconds","markAsDone","QuoteWindowWrapper","QuoteBody","QuoteFooter","ConureQuoteWindow","quotesElements","elem","Carousel","cite","UserBarStyle","ProgressBarWrapperStyle","ProgressBarStyle","LevelImage","ConureUserBar","basePoints","levelMinPoints","levelThresholds","reverse","find","levelNumber","indexOf","percentage","levelImageLink","levelImages","levelImage","fixed","style","userName","ProgressBar","animated","now","newPoints","LoadingScreen","App","user","getUserData","countdown","removeTask","autosetDetailWindow","Login","addXP","URL","fetch","then","res","json","data","user_info","fadeOut","catch","error","targetID","childNodes","click","parentNode","forEach","outerThis","interval","setInterval","clearInterval","JSON","stringify","headers","method","newBody","text","focus","execCommand","getSelection","collapseToEnd","filter","response","b64key","split","username","doc","taskInfo","ID","points","xp","showLoginModal","WebFont","load","google","families","ReactDOM","render","React","createElement"],"mappings":"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","file":"static/js/main.405c2bb4.chunk.js","sourcesContent":["import { css } from \"emotion\";\r\n\r\nconst Styles = {\r\n    NavbarStyle: css `\r\n        border-bottom: 1px solid lightgrey;\r\n        font-family: 'Oxygen', sans-serif;\r\n        font-weight: bold;\r\n        width: 100%;\r\n    `,\r\n    LogoStyle: css `\r\n        width: 8%;\r\n        margin-right: 4%;\r\n    `,\r\n    userKeyStyle: css `\r\n        font-family: 'Goudy Bookletter 1911', serif;\r\n        font-weight: bold;\r\n        position: absolute;\r\n        left: 50%;\r\n        transform: translate(-50%,0);\r\n        transition: all 0.5s;\r\n\r\n        &:hover {\r\n            color: grey;\r\n            font-size: 1.1em;\r\n            cursor: pointer;\r\n        }\r\n    `,\r\n    LoginLinkWrapperStyle: css `\r\n        text-decoration: none !important;\r\n    `,\r\n    LoginLinkStyle: css `\r\n        margin-left: 5vw;\r\n        font-family: 'Goudy Bookletter 1911', serif;\r\n        font-weight: bold;\r\n        transition: all 0.5s;\r\n\r\n        &:hover {\r\n            color: red;\r\n            font-size: 1.1em;\r\n        }\r\n    `,\r\n}\r\n\r\nexport default Styles;","import React, { Component } from \"react\";\r\n\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Popover from \"react-bootstrap/Popover\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\n\r\nimport { cx } from \"emotion\";\r\nimport Styles from \"./ConureNavbarStyles.js\";\r\n\r\nimport $ from \"jquery\";\r\n\r\nclass ConureNavbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n        }\r\n        this.userKey = (new URLSearchParams(window.location.search)).get(\"id\");\r\n\r\n        // Method Bindings\r\n        this.open = this.open.bind(this);\r\n        this.close = this.close.bind(this);\r\n    }\r\n    open() {\r\n        this.setState({showModal: true});\r\n    }\r\n    close() {\r\n        this.setState({showModal: false});\r\n    }\r\n    render() {\r\n        const popover = (\r\n            <Popover id=\"idInfo\">\r\n                <Popover.Title as=\"h5\">Key</Popover.Title>\r\n                <Popover.Content>\r\n                    You can use this base64 key to log into your account.\r\n                </Popover.Content>\r\n            </Popover>\r\n        )\r\n\r\n        return (\r\n            <div id={this.props.id}>\r\n                <Navbar className={ cx( Styles.NavbarStyle ) } bg=\"light\" expand=\"lg\">\r\n                    <Navbar.Brand href=\"#\">\r\n                        <img className={ cx( Styles.LogoStyle ) }  src=\"../../../public/assets/img/ico/conure-light.ico\"/>\r\n                        Conure\r\n                    </Navbar.Brand>\r\n                    <OverlayTrigger trigger=\"click\" placement=\"bottom\" overlay={popover}>\r\n                        <span className={ cx( Styles.userKeyStyle ) } id=\"userKey\">{this.userKey}</span>\r\n                    </OverlayTrigger>\r\n                    <Nav className=\"ml-auto\">\r\n                        <a href=\"#\" className={ cx( Styles.LoginLinkWrapperStyle ) }>\r\n                            <small className={ cx( Styles.LoginLinkStyle ) } onClick={this.open}>Login</small>\r\n                        </a>\r\n                    </Nav>\r\n                </Navbar>\r\n\r\n                <Modal show={this.state.showModal} onHide={this.close}>\r\n                    <Modal.Header closeButton>\r\n                        <i className=\"fas fa-dove\" size=\"2xl\"></i>\r\n                        <Modal.Title className={ cx(Styles.ModalHeaderStyles) }>Login</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Container>\r\n                            <Form>\r\n                                <Form.Group controlId=\"LoginForm\">\r\n                                    <Form.Label>Key</Form.Label>\r\n                                    <Form.Control id=\"loginKey\" size=\"sm\" type=\"text\" placeholder=\"Enter base64 key\"/>\r\n                                    <Form.Text className=\"text-muted\">\r\n                                        Don't have an key? Use the form below to create an account.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                <Button variant=\"outline-danger\" size=\"sm\" onClick={() => this.props.loginHandler($(\"#loginKey\").val())}>\r\n                                    Login\r\n                                </Button>\r\n                            </Form>\r\n                            <hr/>\r\n                            <Form>\r\n                                <Form.Group controlId=\"SignupForm\">\r\n                                    <Form.Label>Create Account</Form.Label>\r\n                                    <Form.Control id=\"newAccountUsername\" size=\"sm\" type=\"text\" placeholder=\"Enter a username\"/>\r\n                                    <Form.Text className=\"text-muted\">\r\n                                        This will generate a unique base 64 key which you can use to login. The key can be found in the Navigation bar.\r\n                                    </Form.Text>\r\n                                    <br/>\r\n                                    <Button variant=\"outline-primary\" size=\"sm\" onClick={() => {this.props.createAccount($(\"#newAccountUsername\").val())}}>\r\n                                        Sign Up\r\n                                    </Button>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Container>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConureNavbar;","import { css } from \"emotion\";\r\n\r\nconst Styles = {\r\n    TaskWindowWrapperStyle: css `\r\n        width: 40vw;\r\n    `,\r\n    TaskWindowContainerStyle: css `\r\n        position: absolute;\r\n        height: 90%;\r\n        width: 40vw;\r\n        border-right: 1px solid gainsboro;\r\n\r\n        padding: 0px;\r\n    `,\r\n    TaskListStyle: css `\r\n        width: 100%;\r\n        margin: 0px;\r\n        padding: 0px;\r\n        border-bottom: 1px solid gainsboro;\r\n    `,\r\n    TaskStyle: css `\r\n        width: 100%;\r\n        font-family: \"Goudy Bookletter 1911\", serif;\r\n        font-weight: bold;\r\n        font-size: 4mm;\r\n        max-width: 100%;\r\n\r\n        word-wrap: break-word;\r\n        overflow-wrap: break-word;\r\n        -webkit-line-break: after-white-space;\r\n        &:hover {\r\n            cursor: pointer;\r\n            background: whitesmoke;\r\n        }\r\n    `,\r\n    TaskWrapperStyle: css `\r\n        width: 100%;\r\n        border-top: 1px solid gainsboro;\r\n    `,\r\n    AddTaskBtnStyle: css `\r\n        text-align: center;\r\n        font-weight: bold;\r\n        font-family: \"Goudy Bookletter 1911\", serif;\r\n        &:hover {\r\n            cursor: pointer;\r\n            background: rgba(217, 83, 79, 8);\r\n        }\r\n    `,\r\n    DeleteIconStyle: css `\r\n        display: absolute;\r\n        float: right;\r\n        margin-top: 3px;\r\n        transition: all 0.5s;\r\n        &:hover{\r\n            color: rgba(217, 83, 79, 8);\r\n            transition: all 0.5s;\r\n        }\r\n    `\r\n}\r\n\r\nexport default Styles;","import React, { Component } from \"react\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport { cx } from \"emotion\";\r\nimport Styles from \"./ConureTaskWindowStyles.js\";\r\n\r\nclass ConureTaskWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div id={this.props.id} className={ cx( Styles.TaskWindowWrapperStyle ) }>\r\n                <Container className={ cx( Styles.TaskWindowContainerStyle ) } fluid>\r\n                    {/* <h6>Task Window</h6> */}\r\n                    <ListGroup className={ cx( Styles.TaskListStyle ) } variant=\"flush\">\r\n                        {/*\r\n                        <ListGroup.Item className={ cx( Styles.TaskStyle ) }>Download the Simple Timer React Component.</ListGroup.Item>\r\n                        <ListGroup.Item className={ cx( Styles.TaskStyle ) }>Set up MongoDB Backend</ListGroup.Item>\r\n                        */}\r\n                        {\r\n                            this.props.tasks.map( task => \r\n                            <div id={task._id} key={task._id} className={ cx(Styles.TaskWrapperStyle) }>\r\n                                <ListGroup.Item key={task._id} id={task._id} className={ cx(Styles.TaskStyle) } onClick={this.props.showDetail}>\r\n                                    {task.body}\r\n                                    <i className={ cx(\"fas\", \"fa-times\", \"fa-lg\", Styles.DeleteIconStyle) }></i>\r\n                                </ListGroup.Item>\r\n                            </div>\r\n                            )\r\n                        }\r\n                        <ListGroup.Item className={ cx( Styles.AddTaskBtnStyle ) } onClick={this.props.addTask} variant=\"danger\">\r\n                            Add Task + \r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConureTaskWindow;","import { css } from \"emotion\";\r\n\r\nconst Styles = {\r\n    DetailWindowWrapperStyle: css `\r\n        background-color: white;\r\n        position: absolute;\r\n        height: 52%;\r\n        right: 0px;\r\n        width: 60vw;\r\n        padding: 15px;\r\n        font-family: \"Oxygen\", sans-serif;\r\n        font-weight: bold;\r\n        border-bottom: 1px solid gainsboro;\r\n    `,\r\n    TaskBodyStyle: css`\r\n        outline: 0;\r\n        display: inline-block;\r\n        border-bottom: 1px solid gainsboro;\r\n        background-color: #f3f3f3;\r\n        padding: 20px; \r\n        border-top-right-radius: 5px;\r\n        border-top-left-radius: 5px;\r\n        transition: all 0.5s;\r\n        margin-bottom: 15px;\r\n\r\n        font-family: 'Goudy Bookletter 1911', serif;\r\n        font-size: 7mm;\r\n        font-weight: normal;\r\n\r\n        max-width: 100%;\r\n\r\n        word-wrap: break-word;\r\n        overflow-wrap: break-word;\r\n        -webkit-line-break: after-white-space;\r\n\r\n        &:hover {\r\n            border-bottom: 1px solid black;\r\n        }\r\n    `,\r\n    ControlPanelStyles: css `\r\n        text-align: center;\r\n        padding: 25px;\r\n\r\n        background-color: white;\r\n        border: 1px solid gainsboro;\r\n        border-radius: 5px;\r\n    `,\r\n    ButtonStyles: css `\r\n        margin-left: 5px;\r\n        margin-right: 5px;\r\n    `\r\n}\r\n\r\nexport default Styles;","import React, { Component } from \"react\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\n\r\nimport { cx } from \"emotion\";\r\nimport Styles from \"./ConureDetailWindowStyles.js\";\r\n\r\nimport $ from \"jquery\";\r\n\r\nclass ConureDetailWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counting: false,\r\n            toggleCoundownButtonVariant: \"success\",\r\n            toggleCoundownButtonContent: \"Start\"\r\n        }\r\n\r\n        // Method Bindings\r\n        this.toggleCountdown = this.toggleCountdown.bind(this);\r\n    }\r\n    toggleCountdown( event ) {\r\n        // Toggle Countdown\r\n        console.log(\"Toggling Countdown...\")\r\n        let counting = !this.state.counting;\r\n\r\n        if (counting) {\r\n            console.log(\"Starting\")\r\n\r\n            this.setState({\r\n                counting: counting,\r\n                toggleCoundownButtonVariant: \"danger\",\r\n                toggleCoundownButtonContent: \"Stop\"\r\n            });\r\n        } else {\r\n            console.log(\"Stopping\")\r\n\r\n            this.setState({\r\n                counting: counting,\r\n                toggleCoundownButtonVariant: \"success\",\r\n                toggleCoundownButtonContent: \"Start\"\r\n            });\r\n\r\n        }\r\n\r\n        this.props.toggleCountdown();\r\n    }\r\n    \r\n    componentDidMount() {\r\n        document.getElementById(\"taskBodyField\").addEventListener(\"input\", ( event ) => {\r\n            this.props.updateTask(event);\r\n        }, false)\r\n    }\r\n    render() {\r\n        const body = this.props.currentTask.body;\r\n        let time_target = 0\r\n\r\n        try {\r\n            time_target = new Date(this.props.currentTask.target);\r\n        } catch(err) {\r\n            time_target = new Date(0);\r\n        }\r\n\r\n        console.log(`Time Target Type: ${typeof time_target}`);\r\n\r\n\r\n        return (\r\n            <div id={this.props.id} className={ cx( Styles.DetailWindowWrapperStyle ) }>\r\n                <Container fluid>\r\n                    <p>In Detail</p>\r\n                    <hr/>\r\n                    <div id={\"taskBodyField\"}\r\n                        contentEditable={true} \r\n                        suppressContentEditableWarning={true}\r\n                        spellCheck={false} \r\n                        className={ cx(Styles.TaskBodyStyle) } \r\n                        placeholder=\"Type here!\"\r\n                    >{body}</div>\r\n                    <br/>\r\n                    <hr/>\r\n                    <Jumbotron className={ cx(Styles.ControlPanelStyles) } fluid>\r\n                        <Container>\r\n                            {(() => {\r\n                                console.log(\"test\");\r\n\r\n                                if (this.props.currentTask._id) {\r\n                                    // console.log(this.props.currentTask);\r\n                                    \r\n                                    return (\r\n                                        <>\r\n                                            <small className={ cx(\"text-muted\") }><i>Time Left</i></small>\r\n                                            <h4>{`${time_target.getHours()}h ${time_target.getMinutes()}m ${time_target.getSeconds()}s`}</h4>\r\n                                            <br/>\r\n                                            <Button id=\"toggleCountdownBtn\" className={ cx(Styles.ButtonStyles) } variant={this.state.toggleCoundownButtonVariant} onClick={this.toggleCountdown} size=\"sm\">{this.state.toggleCoundownButtonContent}</Button>\r\n                                            <Button className={ cx(Styles.ButtonStyles) }variant=\"primary\" onClick={(event) => {\r\n                                                this.setState({counting: false}, () => {\r\n                                                    this.props.markAsDone(event, this.props);\r\n                                                });\r\n                                                }} size=\"sm\">Mark as Done</Button>\r\n                                        </>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <h4 className={ cx(\"text-muted\") }>\r\n                                            <i>Click the red button to add a task!</i>\r\n                                        </h4>\r\n                                    )\r\n                                }\r\n                                })() }\r\n                        </Container>\r\n                    </Jumbotron>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConureDetailWindow;","import { css } from \"emotion\";\r\n\r\nconst Styles = {\r\n    QuoteWindowWrapper: css `\r\n        background-color: white;\r\n        position: absolute;\r\n        height: 38vh;\r\n        right: 0px;\r\n        bottom: 17.5px;\r\n        width: 60vw;\r\n        padding: 15px;\r\n        font-family: \"Playfair Display\", serif;\r\n        border-bottom: 1px solid gainsboro;\r\n        text-align: center;\r\n    `,\r\n    QuoteBody: css `\r\n        margin-top: 35px;\r\n        font-weight: 300;\r\n        transition: all 1s;\r\n\r\n        &:hover {\r\n            font-size: 1.2em;\r\n            color: grey;\r\n        }\r\n    `,\r\n    QuoteFooter: css `\r\n\r\n    `\r\n}\r\n\r\nexport default Styles;","import React, { Component } from \"react\";\r\n\r\nimport Carousel from \"react-bootstrap/Carousel\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nimport { cx } from \"emotion\";\r\nimport Styles from \"./ConureQuoteWindowStyles.js\";\r\n\r\n\r\nclass ConureQuoteWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const quotes = [\r\n            [\"Some weeks take decades to happen. Some decades happen in weeks.\", \"Vladimir Ilyitch Lenin\", \"The Chief Tasks of Our Day\"],\r\n            [\"He who cannnot lie does not know what the truth is.\", \"Friedrich Nietzsche\", \"Thus Spoke Zarathustra\"]\r\n        ]\r\n\r\n        const quotesElements = quotes.map(elem => (\r\n            <Carousel.Item>\r\n                <h6 className={ cx(\"text-muted\") }>\r\n                    <small><i>Quote</i></small>\r\n                </h6>\r\n                <Container>\r\n                    <blockquote cite=\"Author\">\r\n                        <p className={ cx(Styles.QuoteBody) }>{elem[0]}</p>\r\n                        <footer className={ cx(Styles.QuoteFooter, \"text-muted\") }>\r\n                            <small>\r\n                                {elem[1]},<cite>{elem[2]}</cite>\r\n                            </small>\r\n                        </footer>\r\n                    </blockquote>\r\n                </Container>\r\n            </Carousel.Item>\r\n        ))\r\n\r\n        return (\r\n            <div id={this.props.id} className={ cx(Styles.QuoteWindowWrapper) }>\r\n                <Carousel>\r\n                    {quotesElements}\r\n                </Carousel>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConureQuoteWindow;","import { css } from \"emotion\";\r\n\r\nconst Styles = {\r\n    UserBarStyle: css `\r\n        border-top: 1px solid lightgrey;\r\n    `,\r\n    ProgressBarWrapperStyle: css `\r\n        width: 50vw;\r\n        position: absolute;\r\n        right: 5vw;\r\n    `,\r\n    ProgressBarStyle: css `\r\n        width: 37vw;\r\n        float: right;\r\n        margin-top: 1.35vh;\r\n    `,\r\n    LevelImage: css `\r\n        width: 3vw;\r\n    `\r\n}\r\n\r\nexport default Styles;","import React, { Component } from \"react\";\r\n\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nimport { cx } from \"emotion\";\r\nimport Styles from \"./ConureUserBarStyles.js\";\r\n\r\nimport $ from \"jquery\";\r\n\r\nclass ConureUserBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n\r\n        let basePoints = this.props.basePoints;\r\n        const levelMinPoints = this.props.levelThresholds.reverse().find(elem => elem <= basePoints);\r\n        this.props.levelThresholds.reverse();\r\n        const levelNumber = this.props.levelThresholds.indexOf(levelMinPoints);\r\n        basePoints -= levelMinPoints;\r\n        let percentage = basePoints/(this.props.levelThresholds[levelNumber+1] - levelMinPoints) * 100;\r\n        \r\n        if(!percentage && percentage != 0) {\r\n            percentage = 100;\r\n        }\r\n\r\n        const levelImageLink = this.props.levelImages[levelNumber];\r\n        const levelImage = <img className={ cx( Styles.LevelImage ) } src={`../../../public/assets/img${levelImageLink}`}></img>\r\n\r\n        return (\r\n            <div id={this.props.id}>\r\n                <Navbar className={ cx( Styles.UserBarStyle ) } fixed=\"bottom\" expand=\"lg\" bg=\"light\">     \r\n                    <Navbar.Text>\r\n                        Signed in as: <span id=\"userNameField\" href=\"#login\" style={{\"color\": \"black\"}}>{this.props.userName}</span>\r\n                    </Navbar.Text>\r\n                    <div className={ cx( Styles.ProgressBarWrapperStyle ) }>\r\n                        <Navbar.Brand>{levelImage}</Navbar.Brand>\r\n                        <Navbar.Text>Level {levelNumber}</Navbar.Text>\r\n                        <ProgressBar className={ cx( Styles.ProgressBarStyle) }>\r\n                            <ProgressBar animated variant=\"info\" now={percentage}></ProgressBar>\r\n                            <ProgressBar animated variant=\"danger\" now={this.props.newPoints}></ProgressBar>\r\n                        </ProgressBar>\r\n                    </div>\r\n                    \r\n                </Navbar>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default ConureUserBar;","import { css } from \"emotion\";\r\n\r\nconst Styles = {\r\n    LoadingScreen: css `\r\n        position:fixed;\r\n        z-index: 9999;\r\n        top:0;\r\n        left:0;\r\n        bottom:0;\r\n        right:0;\r\n        background:rgba(0,0,0,.5);\r\n    `\r\n}\r\n\r\nexport default Styles;","import React, { Component } from \"react\";\r\n\r\nimport ConureNavbar from \"./components/ConureNavbar/ConureNavbar\";\r\nimport ConureTaskWindow from \"./components/ConureTaskWindow/ConureTaskWindow\";\r\nimport ConureDetailWindow from \"./components/ConureDetailWindow/ConureDetailWindow\";\r\nimport ConureQuoteWindow from \"./components/ConureQuoteWindow/ConureQuoteWindow\";\r\nimport ConureUserBar from \"./components/ConureUserBar/ConureUserBar\";\r\n\r\nimport { cx } from \"emotion\";\r\nimport Styles from \"./AppStyles\";\r\n\r\nimport $ from \"jquery\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // State\r\n        this.state = {\r\n            user: {},\r\n            tasks: [],\r\n            newPoints: 0,\r\n            currentTask: {\r\n                \r\n            },\r\n            counting: false,\r\n        };\r\n\r\n        // Level Information\r\n        this.levelImages = [\"/png/pigeon.png\", \"/png/flamingo.png\", \"/png/pelican.png\", \"/png/bluebird.png\", \"/png/puffin.png\", \"/png/conure-light.png\"];\r\n        this.levelThresholds = [0, 150, 250, 450, 750, 900];\r\n\r\n        // Method Bindings\r\n        this.getUserData = this.getUserData.bind(this);\r\n        this.showDetail = this.showDetail.bind(this);\r\n        this.toggleCountdown = this.toggleCountdown.bind(this);\r\n        this.countdown = this.countdown.bind(this);\r\n        this.removeTask = this.removeTask.bind(this);\r\n        this.addTask = this.addTask.bind(this);\r\n        this.updateTask = this.updateTask.bind(this);\r\n        this.autosetDetailWindow = this.autosetDetailWindow.bind(this);\r\n        this.Login = this.Login.bind(this);\r\n        this.createAccount = this.createAccount.bind(this);\r\n        this.markAsDone = this.markAsDone.bind(this);\r\n        this.addXP = this.addXP.bind(this);\r\n    }\r\n\r\n    // Get User Data\r\n    getUserData() {\r\n        const params = new URLSearchParams(document.location.search);\r\n        const id = params.get(\"id\");\r\n\r\n        if ( !id ) {\r\n            console.log(\"Error: The id paramater is missing from the url.\");\r\n            return\r\n        }\r\n\r\n        console.log(\"Fetching data...\")\r\n        const URL = `https://conure-backend.herokuapp.com/importUserData?id=${id}`;\r\n        fetch(URL)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            //data = JSON.parse(data);\r\n            console.log(\"Data fetched.\")\r\n            console.log(data.user_info);\r\n            console.log(data.tasks);\r\n            this.setState({user: data.user_info, tasks: data.tasks})\r\n        })\r\n        .then(() => {\r\n            this.autosetDetailWindow();\r\n        })\r\n        .then(() => {\r\n            // Turning off the loading screen\r\n            console.log($(\"#LoadingScreen\"))\r\n            $(\"#LoadingScreen\").fadeOut();\r\n        })\r\n        .catch(error => {\r\n            console.log(`Error retrieving user data: ${error}`);\r\n        })\r\n\r\n    }\r\n\r\n    autosetDetailWindow() {\r\n        try {\r\n            const targetID = this.state.tasks[0]._id;\r\n            document.getElementById(targetID).childNodes[0].click();\r\n        } catch ( error ) {\r\n            this.setState({ currentTask: {\r\n                body: \"\",\r\n                target: \"\"\r\n            }})\r\n        }\r\n    }\r\n\r\n    // Show Detail\r\n    showDetail(event) {\r\n        // Get the ID of the Target Task Element & Task List\r\n        let targetID = event.target.parentNode.id;\r\n        const tasks = this.state.tasks;\r\n\r\n        // Call removeTask if the cross has been selected\r\n        if ( !targetID ) {\r\n            this.removeTask(event);\r\n            return;\r\n        }\r\n\r\n        // Extract the Target task from the task list\r\n        let currentTask = {};\r\n        tasks.forEach( task => { if ( task._id == targetID ) currentTask = task });\r\n\r\n        // Set the new current task in state.\r\n        this.setState({ currentTask: currentTask });\r\n    }\r\n\r\n    // Toggle Countdown\r\n    toggleCountdown() {\r\n        this.setState({counting: !this.state.counting}, () => {\r\n            console.log(`Counting: ${this.state.counting}`);\r\n            if (this.state.counting) {\r\n                this.countdown();\r\n            }\r\n        });\r\n    }    \r\n\r\n    // Countdown\r\n    countdown() {\r\n        const outerThis = this;\r\n        let currentTask = {};\r\n        let tempKey = 0;\r\n\r\n        const URL = `https://conure-backend.herokuapp.com/upda\r\n        teUserInfo`;\r\n        let body = {} \r\n\r\n        const interval = setInterval(() => {\r\n            currentTask = this.state.currentTask;\r\n            currentTask.target -= 1000\r\n            outerThis.setState({currentTask: currentTask}, () => {\r\n                if(outerThis.state.counting == false) {\r\n                    clearInterval(interval);  \r\n                    \r\n                    // Save to MongoDB\r\n                    body = JSON.stringify({\r\n                        \"user\": outerThis.state.user,\r\n                        \"tasks\": outerThis.state.tasks,\r\n                    })\r\n                    console.log(body);\r\n\r\n                    fetch(URL, {\r\n                        headers: {\r\n                            \"Content-type\": \"application/json\"\r\n                        },\r\n                        method: \"PUT\",\r\n                        body: body,\r\n                    })\r\n                    .then( res => res.json )\r\n                    .then( res => {\r\n                        console.log(res);    \r\n                    })\r\n                }\r\n            });\r\n        }, 1000)\r\n    }\r\n\r\n    // Update Task\r\n    updateTask(event){\r\n        // Getting the ID of the content editable field, the new body and the tasklist\r\n        const targetID = this.state.currentTask._id;\r\n        const newBody = $(event.target).text();\r\n        const tasks = this.state.tasks;\r\n\r\n        // Applying update to relevant task\r\n        tasks.forEach( task => { if (task._id  == targetID)  task.body=newBody });\r\n\r\n        // Set the updated task list in state.\r\n        this.setState({ tasks: tasks }, () => {\r\n            console.log(\"Saving...\");\r\n\r\n            // Update Task List & UserInfo Data\r\n            const URL = \"https://conure-backend.herokuapp.com/updateUserInfo\";\r\n            const body = JSON.stringify({\r\n                user: this.state.user,\r\n                tasks: this.state.tasks\r\n            })\r\n\r\n            console.log(this.state.tasks);\r\n\r\n            fetch(URL, {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\"\r\n                },\r\n                method: \"PUT\",\r\n                body: body\r\n            })\r\n            .then( res => res.json())\r\n            .then( data => console.log(data))\r\n            .catch( (error) => {\r\n                console.log(error);\r\n            })\r\n\r\n        })\r\n\r\n        // ->> Move back to previous position\r\n        // Moving the Caret back to the end\r\n        document.getElementById(targetID).focus();\r\n        document.execCommand('selectAll', false, null);\r\n        const selection = document.getSelection();\r\n        selection.collapseToEnd();\r\n    }\r\n\r\n    // removeTask\r\n    removeTask(event, targetID = false) {\r\n        if (!targetID) {\r\n            // Get the ID of the target Task Element\r\n            targetID = event.target.parentNode.parentNode.parentNode.id;\r\n            if ( !targetID ) targetID = event.target.parentNode.parentNode.id;\r\n        }\r\n\r\n        const URL = \"https://conure-backend.herokuapp.com/removeTask\";\r\n        // console.log(this.state.user.key, targetID);\r\n        const body = JSON.stringify({\r\n            \"id\": this.state.user.key,\r\n            \"taskId\": targetID\r\n        });\r\n        fetch(URL, {\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            method: \"PUT\",\r\n            body: body\r\n        })\r\n\r\n        // Get Current Task List\r\n        let tasks = this.state.tasks;\r\n\r\n        // Filter out the target task\r\n        tasks = tasks.filter(task => { return task._id != targetID });\r\n\r\n        // Set the task list to the remaining tasks\r\n        this.setState({tasks: tasks}, () => {\r\n            this.autosetDetailWindow();\r\n        });\r\n    }\r\n\r\n    // addTask\r\n    addTask(event) {\r\n        const URL = \"https://conure-backend.herokuapp.com/createTask\";\r\n        const body = JSON.stringify({\r\n            \"id\": this.state.user.key,\r\n            \"body\": \"Type here.\",\r\n            \"target\": 10\r\n        })\r\n\r\n        console.log(body);\r\n\r\n        fetch(URL, {\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            method: \"PUT\",\r\n            body: body\r\n        })\r\n        .then( response => {\r\n            console.log(\"Created New Task.\");\r\n            this.getUserData();\r\n        })\r\n\r\n    }\r\n\r\n    // Login\r\n    Login(b64key) {\r\n        // Check if account exists (backend request)\r\n        document.location = `${document.location.href.split(\"?\")[0]}?id=${b64key}`;\r\n    }\r\n\r\n    // createAccount\r\n    createAccount(username) {\r\n        let URL = \"https://conure-backend.herokuapp.com/generateID\"\r\n\r\n        fetch(URL)\r\n        .then( res => res.json() )\r\n        .then( doc => {\r\n            const key = doc.key;\r\n            URL = `https://conure-backend.herokuapp.com/createUserBucket?id=${key}&username=${username}`;\r\n\r\n            fetch(URL)\r\n            .then(() => {\r\n                document.location = `${document.location.href.split(\"?\")[0]}?id=${key}`;\r\n            })\r\n        })\r\n    }\r\n\r\n    // Mark as Done\r\n    markAsDone(event, taskInfo) {\r\n        this.addXP(event, 100);\r\n\r\n        // Remove Task Below\r\n        const ID = taskInfo.currentTask._id;\r\n        this.removeTask(event, ID);\r\n    }\r\n\r\n    // Add XP\r\n    addXP(event, points) {\r\n        let user = this.state.user;\r\n        user.xp += points;\r\n        this.setState({user: user});\r\n        console.log(user);\r\n        \r\n    }\r\n\r\n    // Component Will Mount\r\n    componentWillMount() {\r\n        this.getUserData();\r\n    }\r\n\r\n    // Component Did Unmount\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    // Render\r\n    render() {\r\n        {/* Retrieve Mongo Entries via API */}\r\n        return (\r\n            <>\r\n                <div id=\"LoadingScreen\" className={cx(Styles.LoadingScreen)}></div>\r\n\r\n                <ConureNavbar \r\n                    id=\"ConureNavbar\" \r\n                    showLoginModal={this.showLoginModal} \r\n                    loginHandler={this.Login}\r\n                    createAccount={this.createAccount}\r\n                />\r\n                <ConureTaskWindow \r\n                    id=\"ConureTaskWindow\" \r\n                    tasks={this.state.tasks} \r\n                    removeTask={this.removeTask} \r\n                    addTask={this.addTask} \r\n                    showDetail={this.showDetail}\r\n                />\r\n                <ConureDetailWindow \r\n                    id=\"ConureDetailWindow\"    \r\n                    currentTask={this.state.currentTask} \r\n                    updateTask={this.updateTask}\r\n                    markAsDone={this.markAsDone}\r\n                    toggleCountdown={this.toggleCountdown}\r\n                />\r\n                <ConureQuoteWindow\r\n                    id=\"ConureQuoteWindow\"\r\n                />\r\n                <ConureUserBar \r\n                    id=\"ConureUserBar\" \r\n                    userName={this.state.user.username} \r\n                    levelThresholds={this.levelThresholds}\r\n                    levelImages={this.levelImages}\r\n                    basePoints={this.state.user.xp} \r\n                    newPoints={this.state.newPoints} \r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport WebFont from \"webfontloader\";\r\n\r\nimport App from \"./App\";\r\n\r\nWebFont.load({\r\n    google: {\r\n        families: [\"Goudy Bookletter 1911\", \"Playfair Display\", \"Rubik\", \"Oxygen\"]\r\n    }\r\n})\r\n\r\nReactDOM.render(React.createElement(App), document.getElementById(\"app\"));\r\n\r\n/*\r\nprocess.on('SIGINT', function() {\r\n    mongoose.connection.close(function () {\r\n    console.log('Mongoose disconnected on app termination');\r\n    process.exit(0);\r\n    });\r\n});\r\n*/"],"sourceRoot":""}